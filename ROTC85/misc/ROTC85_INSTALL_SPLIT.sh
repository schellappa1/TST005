#!/bin/ksh
echo " +---------------------------------------------------------------------------------------------------------+"
echo " |                            Powered by the AUTOMATED CODE MIGRATION TOOL.                                |  "
echo " | If you face any issues or have any brickbats for this tool please contact ERP WICER Team                |  "
echo " |                             Generated by Template Version 14                                           |  "
echo " +---------------------------------------------------------------------------------------------------------+"
#/*
#||   Filename: ROTC85_INSTALL.sh
#||   Description: Commercial Invoice Report
#||   Ver       Date           Author           Modification
#||   1.0       29/05/2019      Senthilkumar shanmugam   Initial Creation
#||
#||   Usage : Install the object 'Commercial Invoice Report'
#||
#||   Copyright Gilead
#||   ****************
#||   All rights reserved.
#*/
INSTALLATION_LOGFILE=$0.`date +%d%b%y_%H%M%S`.log
# *******************************************************************
#  Function to copy file on remote DMZ server
# *******************************************************************
COPY_TO_DMZ(){
echo  ".....Copying to remote server: $XXGIL_EXTERNAL_SERVER "
if [ -z "$XXGIL_EXTERNAL_SERVER" ]; then
    echo ".....[WARNING]:External server variable XXGIL_EXTERNAL_SERVER not set. File $1 will not be copied to any remote server."
else 
     echo ".....Copying $1 to remote server $XXGIL_EXTERNAL_SERVER"
     scp $1 ${XXGIL_EXTERNAL_SERVER}:$2/$1 
     ssh ${XXGIL_EXTERNAL_SERVER} chmod 755 $2/$1
fi
}

# *******************************************************************
#  Function to create soft link on remote DMZ server
# *******************************************************************
LINK_IN_DMZ(){
echo "....Creating link in remote server: $XXGIL_EXTERNAL_SERVER "
if [ -z "$XXGIL_EXTERNAL_SERVER" ]; then
    echo "....[WARNING]:External server variable XXGIL_EXTERNAL_SERVER not set. link will not be created on any remote server."
else
     echo ".....Creating link $1 on $XXGIL_EXTERNAL_SERVER"
     ssh  ${XXGIL_EXTERNAL_SERVER} ln -sf $1 $2
fi
}

# *******************************************************************
#  Function to Check the validity of login ids and password.
# *******************************************************************
CHKLOGIN(){
if sqlplus -s /nolog <<! >/dev/null 2>&1
WHENEVER SQLERROR EXIT 1;
CONNECT $1 ;
 
EXIT
!
then
echo OK
else
echo NOK
fi
}



# *******************************************************************
#  Main function
# *******************************************************************
MAIN(){
echo "---------------------[Start of Installation]---------------------"
echo "Process Started at `date +%d/%m/%y.%H:%M:%S`"
echo "SVN Repository Path: http://fcsource01:8080/svn/WICER/ROTC85/"
echo "Installation logfile: $INSTALLATION_LOGFILE "
echo " "
migrErrorCode=0 

# *******************************************************************
#  Prompt for APPS Login Id /Password
# *******************************************************************
echo  "-----------------------[EBS Database Login]-----------------------"
while [ "$APPSID" = "" -o `CHKLOGIN "$APPSID"` = "NOK" ]
do
if [ "$APPSID" = "" ];then
echo "Enter APPS Login Userid/Passwd (entered text will not display): "
read -s APPSID
else
echo " APPS Login UserId And Password Is Not CORRECT "
APPSID=""
fi
done    

# *******************************************************************
#  Prompt for SVN Login Id /Password
# *******************************************************************
SUBVERSION_UserName=SVNWERACCT
SVN_Password=svnwer123
while [ "$SUBVERSION_UserName" = "" -o "$SVN_Password" = "" ]
do
echo  "----------------------------[SVN Login]---------------------------"
echo "   Enter SVN Userid : "
read SUBVERSION_UserName
echo "   Enter SVN (Gilead SSO) Password (entered text will not display) : "
read -s SVN_Password
done    
echo  " Removing the existing WICER ROTC85_122 Directory "
rm -rf ROTC85_122
 
echo  "+---------------------------------------------------------------------+"
echo  "| Checking out files for WICER: ROTC85_122                       "
echo  "+---------------------------------------------------------------------+"
 
/opt/CollabNet_Subversion/bin/svn co --username $SUBVERSION_UserName  --password $SVN_Password  --depth empty  http://fcsource01:8080/svn/WICER/ROTC85/ROTC85_122
cd ROTC85_122
 
/opt/CollabNet_Subversion/bin/svn up -r 60542 XXGILARCOMINVSPLIT.rdf
if [ -e XXGILARCOMINVSPLIT.rdf ]; then
  echo "XXGILARCOMINVSPLIT.rdf checked out successfully."
else
  echo "[ERROR]: XXGILARCOMINVSPLIT.rdf FAILED to check out"
  echo "Fatal Error..."
    migrErrorCode=1 
  #exit
fi
 
cd ..
export FORMS_PATH=$FORMS_PATH:$AU_TOP/forms/US
 apps_user=`echo $APPSID | cut -d / -f 1 | cut -d @ -f 1`
 apps_pwd=`echo $APPSID | cut -d / -f 2 | cut -d @ -f 1`
 DB_HOST=`cat $CONTEXT_FILE |grep s_apps_jdbc_connect_descriptor | sed 's/.*HOST=\(.*\))(PORT.*/\1/g'`
 DB_PORT=`cat $CONTEXT_FILE |grep s_apps_jdbc_connect_descriptor | sed 's/.*PORT=\(.*\))))(CONNECT.*/\1/g'`
 DB_SID=`cat $CONTEXT_FILE |grep s_apps_jdbc_connect_descriptor | sed 's/.*SID=\(.*\)))).*/\1/g'`
 TNS_STRING=`cat $CONTEXT_FILE|grep s_apps_jdbc_connect_descriptor|cut -d @ -f 2 | sed 's/<\/jdbc_url>//'`
cd ROTC85_122
echo  "+---------------------------------------------------------------------+"
echo  "| Compiling and copying files for WICER ROTC85_122 "
echo  "+---------------------------------------------------------------------+"
if [ -e XXGILARCOMINVSPLIT.rdf ]; then
  echo ".....Copying XXGILARCOMINVSPLIT.rdf"
  cp -f XXGILARCOMINVSPLIT.rdf $XXGIL_TOP/reports/US/
    chmod 755 $XXGIL_TOP/reports/US/XXGILARCOMINVSPLIT.rdf
    COPY_TO_DMZ XXGILARCOMINVSPLIT.rdf $XXGIL_TOP/reports/US/
  if [ -e $XXGIL_TOP/reports/US/XXGILARCOMINVSPLIT.rdf ]; then
    migrErrorCode=migrErrorCode 
  else
    migrErrorCode=1 
  fi
fi
if [ "$migrErrorCode" = "1" ]
then 
  FCP_BODY="[ATTENTION]:Migration Failed. See log files for details."
  STATUS=FAILED
else 
  FCP_BODY="Though the tool did not capture any errors please validate the log files for each of your code component."
  STATUS=SUCCESS
fi
echo ${FCP_BODY}
tar -cvf ROTC85_122_Migrations.log.tar *.log
FCP_EMAIL_SUBJECT=MIGRATION:ROTC85_122:${TWO_TASK}::${STATUS}
FCP_RECIPIENTS="${MAIL_DIST_LIST};senthilkumar.shanmugam@gilead.com"
  echo  "# Sending email***#"
ATTACH_FILENAME=ROTC85_122_Migrations.log.tar
mutt -s ${FCP_EMAIL_SUBJECT} -a ${ATTACH_FILENAME} ${FCP_RECIPIENTS} << TT
${FCP_BODY}
TT
echo "<TR><TD>${TWO_TASK}</TD>  <TD >`date`</TD><TD>ROTC85_122</TD>  <TD>${STATUS}</TD> <TD>${FCP_RECIPIENTS}</TD></TR>" >> ${OA_HTML}/migrations.log
echo ""
echo "Process Ended at `date +%d/%m/%y.%H:%M:%S`"
echo "-------------------[End of Installation]-------------------"
}
# *******************************************************************
#  Script starts here
# *******************************************************************
MAIN 2>&1 | tee -a $INSTALLATION_LOGFILE
FCP_EMAIL_SUBJECT=InstallScriptLog:ROTC85
FCP_RECIPIENTS="${MAIL_DIST_LIST};senthilkumar.shanmugam@gilead.com"
echo  "# Sending email for installation log***#"
mutt -s ${FCP_EMAIL_SUBJECT} -a ${INSTALLATION_LOGFILE} ${FCP_RECIPIENTS} << TT
The attached file is the installation shell script log.
TT
echo "Installation logfile: $INSTALLATION_LOGFILE "
echo "-------------------[End of Script]-------------------"
